/* This file is part of scl, a control and simulation library
for robots and biomechanical models.

scl is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 3 of the License, or (at your option) any later version.

Alternatively, you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 2 of
the License, or (at your option) any later version.

scl is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License and a copy of the GNU General Public License along with
scl. If not, see <http://www.gnu.org/licenses/>.
*/
/* \file SRigidBody.hpp
 *
 *  Created on: Jul 22, 2010
 *
 *  Copyright (C) 2010
 *
 *  Author: Samir Menon <smenon@stanford.edu>
 */ 

#ifndef SRIGIDBODY_HPP_
#define SRIGIDBODY_HPP_

#include <scl/DataTypes.hpp>
#include <scl/data_structs/SObject.hpp>

#include <sutil/CMappedList.hpp>

#include <Eigen/Core>
#include <Eigen/Geometry>

#include <string>
#include <vector>

namespace scl
{

/** The graphics specification for one rigid body. */
class SRigidBodyGraphics
{
public:
  // Eigen requires redefining the new operator for classes that contain fixed size Eigen member-data.
  // See http://eigen.tuxfamily.org/dox/StructHavingEigenMembers.html
  EIGEN_MAKE_ALIGNED_OPERATOR_NEW

  Eigen::VectorXd pos_in_parent_;
  //NOTE TODO : Not using Eigen::Quaternion here because of weird Eigen dynamic_cast errors! Figure them out later.
  Eigen::VectorXd ori_parent_quat_; //x y z real
  Eigen::VectorXd scaling_; //Between 0 and 1. Default is 1.

  sInt collision_type_=0;//NOTE TODO : Should be an enum
  sFloat option_axis_frame_size_=0.0;

  std::string file_name_="";

  /** The list of graphics classes */
  enum EGraphicObjectType{ GRAPHIC_TYPE_FILE_OBJ, GRAPHIC_TYPE_SPHERE, GRAPHIC_TYPE_CUBOID, GRAPHIC_TYPE_CYLINDER,
    GRAPHIC_TYPE_NOT_INIT };

  /** FILE, SPHERE, CUBE */
  EGraphicObjectType class_=EGraphicObjectType::GRAPHIC_TYPE_NOT_INIT;

  /** Color (rgb) */
  double color_[3] ={0.0,0.0,0.0};

  SRigidBodyGraphics()
  {
    pos_in_parent_.setZero(3);
    ori_parent_quat_.setZero(4);
    ori_parent_quat_(3) = 1;
    scaling_.setConstant(3,1);//x y z scaling. Default = 1
  }
};

/**
 * This structure contains all the information required to construct
 * a robot link. Each robot is completely defined by a tree of such 
 * links.
 */
class SRigidBody : public SObject
{
public:    
  // Eigen requires redefining the new operator for classes that contain fixed size Eigen member-data.
  // See http://eigen.tuxfamily.org/dox/StructHavingEigenMembers.html
  EIGEN_MAKE_ALIGNED_OPERATOR_NEW

	//Constructor@End of the class:
	
	//****************************************************************************************
  //Robot Branching data:
  
  // Identifiers
  std::string robot_name_;
  /** This link id will be autogenerated by scl. It MUST match all dynamics
   * and graphics implementations
   * NOTE : Ids are not read in from a file. They are autogenerated by scl. */
  sInt link_id_;
  
  // Tree structure information: (Enables manual tree parsing)
  std::string parent_name_;
  SRigidBody* parent_addr_;
  std::vector<SRigidBody*> child_addrs_;

  //3. Graph structure information: (Enables manual graph parsing)
  std::vector<SRigidBody*> gr_parent_names_;
  std::vector<SRigidBody*> gr_parent_addrs_;
  std::vector<SRigidBody*> gr_child_addrs_;
  
  //****************************************************************************************
  // Static Link Properties (wrt. parent at the zero position)
  sBool is_root_;

	Eigen::Vector3d pos_in_parent_; ///< Position in the parent frame.
	/** Orientation in the parent frame.
	 * NOTE : In files, Quaternion is stored in the form << x, y, z, w/real >> */
  Eigen::Quaternion<sFloat> ori_parent_quat_;

  /** Mass and inertia properties */
  Eigen::Vector3d com_;     ///< Center of mass position (in own frame)
  sFloat mass_;             ///< Mass
  Eigen::Matrix3d inertia_; ///< Inertia at the center of mass
  sFloat inertia_gc_;       ///< Inertia at the generalized coordinate (joint). Default = 0

  sInt link_is_fixed_;      ///< (No joints) Fixed links are simply merged into upper links.

  //****************************************************************************************
  // Joint information
  std::string joint_name_;
  sFloat joint_limit_lower_, joint_limit_upper_;
  sFloat joint_default_pos_;
  EJointType joint_type_;
  
  //****************************************************************************************
  // Friction model constants (these may be used in different ways by different physics engines)
  sFloat stiction_gc_force_lower_, stiction_gc_force_upper_; ///< Force/torque stiction while at zero vel
  sFloat stiction_gc_vel_lower_, stiction_gc_vel_upper_;     ///< Stiction will apply up to these velocities
  sFloat friction_gc_kv_;                                    ///< Friction force = - kv * velocity

  //****************************************************************************************
  // Actuator information
  sFloat force_gc_lim_lower_, force_gc_lim_upper_; ///< Force/torque limits at the gc (joint)

  //****************************************************************************************
  // Spatial joint information
  std::vector<std::string> sp_joint_name_;
  std::vector<sBool> sp_joint_broken_in_spanning_tree_;
  Eigen::VectorXd sp_joint_limit_lower_, sp_joint_limit_upper_, sp_joint_default_pos_;
  Eigen::MatrixXd sp_S_joint_;     ///< Column vectors correspond to spatial directions of motion
  Eigen::MatrixXd sp_Sorth_joint_; ///< Column vectors correspond to spatial directions of constraint

  //****************************************************************************************
  // Graphics data
  std::vector<SRigidBodyGraphics> graphics_obj_vec_;
  sInt collision_type_;
  ERenderType render_type_;

  //****************************************************************************************
  /** Constructor */
  SRigidBody();

  /** Sets the default parameter values */
  void init();
};

}//end of namespace scl_parser

#endif /*SRIGIDBODY_HPP_*/
